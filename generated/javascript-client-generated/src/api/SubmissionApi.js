/*
 * Makhno API design
 * The endpoint sequence described here is part of the Makhno suite. The purpose is to define a protocol by which a client can request reachability checks from our infrastructure.  ## There are some reserved words that we use in this document:  `target URL`: this is the URL of a social media platform that we want to monitor. the subjects covered in this framework, are, for the most part. `target URLs`. they can be youtube videos or facebook posts. we are talking about a social media platform URL (not all of them are supported, of course, and different versions prograd in supporting more and more of them)  `availabilityCheck`: is the action by which we verify that a `target URL` is accessible from a certain country.  `vantagePoint`: is a point in the Internet network from which the availabilityCheck is executed to a targetURL. They are identified by the nationality of the internet service provider hosting them.  `agent`: a tool executed from a `vantagePoint`, this tool connects to a `target URL` and verify if the content is reachable or not.  ## The purpose of Makhno, as you can guess, is to map whether a social media content is accessible from a nation or not.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: technology@makhno.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {SubmissionDetail} from '../model/SubmissionDetail';
import {SubmissionList} from '../model/SubmissionList';
import {SubmissionProposal} from '../model/SubmissionProposal';

/**
* Submission service.
* @module api/SubmissionApi
* @version 1.0.0
*/
export class SubmissionApi {

    /**
    * Constructs a new SubmissionApi. 
    * @alias module:api/SubmissionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the submissionGet operation.
     * @callback moduleapi/SubmissionApi~submissionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubmissionList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Know which URL have been submitted (not used by agent)
     * This is the endpoint that manages a collection of objects into the database; It returns the list of &#x60;targetURL&#x60; that match the criterias specify by the &#x60;agent&#x60;, it can also return a default if not filtering is provided; it is worthy to list existing requested URL and identify their presence in the infrastructure. the &#x60;id&#x60; mentioned here is also referred as &#x60;submissionId&#x60; in other endpoints.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter query parameters to filter the URL submitted in the past, that might be tested by an agent
     * @param {module:api/SubmissionApi~submissionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    submissionGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'filter': opts['filter']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = SubmissionList;

      return this.apiClient.callApi(
        '/submission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the submitURL operation.
     * @callback moduleapi/SubmissionApi~submitURLCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubmissionDetail{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit to the Makhno server the request to verify a &#x60;targetURL&#x60;
     * @param {module:model/SubmissionProposal} body The payload contains a &#x60;targetURL&#x60; and one or more country code, in the hopes some &#x60;agent&#x60; that runs in the right ISP, would pull this submission and perform an &#x60;availabilityCheck&#x60; from their &#x60;vantagePoint&#x60;. Internally the &#x60;target URL&#x60; is validated in the same way as in the /GAFAM/ endpoints.
     * @param {String} url 
     * @param {Array.<String>} countryCodes 
     * @param {module:api/SubmissionApi~submitURLCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    submitURL(body, url, countryCodes, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling submitURL");
      }
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling submitURL");
      }
      // verify the required parameter 'countryCodes' is set
      if (countryCodes === undefined || countryCodes === null) {
        throw new Error("Missing the required parameter 'countryCodes' when calling submitURL");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'url': url,'countryCodes': this.apiClient.buildCollectionParam(countryCodes, 'multi')
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = SubmissionDetail;

      return this.apiClient.callApi(
        '/submission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}