/*
 * Makhno API design
 * The endpoint sequence described here is part of the Makhno suite. The purpose is to define a protocol by which a client can request reachability checks from our infrastructure.  ## There are some reserved words that we use in this document:  `target URL`: this is the URL of a social media platform that we want to monitor. the subjects covered in this framework, are, for the most part. `target URLs`. they can be youtube videos or facebook posts. we are talking about a social media platform URL (not all of them are supported, of course, and different versions prograd in supporting more and more of them)  `availabilityCheck`: is the action by which we verify that a `target URL` is accessible from a certain country.  `vantagePoint`: is a point in the Internet network from which the availabilityCheck is executed to a targetURL. They are identified by the nationality of the internet service provider hosting them.  `agent`: a tool executed from a `vantagePoint`, this tool connects to a `target URL` and verify if the content is reachable or not.  ## The purpose of Makhno, as you can guess, is to map whether a social media content is accessible from a nation or not.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: technology@makhno.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from './ApiClient';
import {AddScheduled} from './model/AddScheduled';
import {ParsePayload} from './model/ParsePayload';
import {ParseResult} from './model/ParseResult';
import {ProposedUrl} from './model/ProposedUrl';
import {ScheduledActivity} from './model/ScheduledActivity';
import {ScheduledList} from './model/ScheduledList';
import {SubmissionDetail} from './model/SubmissionDetail';
import {SubmissionList} from './model/SubmissionList';
import {SubmissionProposal} from './model/SubmissionProposal';
import {SupportedUrl} from './model/SupportedUrl';
import {SupportedUrlFormat} from './model/SupportedUrlFormat';
import {SupportedUrlFormatList} from './model/SupportedUrlFormatList';
import {TestResult} from './model/TestResult';
import {TestResultList} from './model/TestResultList';
import {ValidityCheck} from './model/ValidityCheck';
import {GAFAMApi} from './api/GAFAMApi';
import {ResultsApi} from './api/ResultsApi';
import {ScheduledApi} from './api/ScheduledApi';
import {SubmissionApi} from './api/SubmissionApi';

/**
* The_endpoint_sequence_described_here_is_part_of_the_Makhno_suite__The_purpose_is_to_define_a_protocol_by_which_a_client_can_request_reachability_checks_from_our_infrastructure__There_are_some_reserved_words_that_we_use_in_this_documenttarget_URL_this_is_the_URL_of_a_social_media_platform_that_we_want_to_monitor__the_subjects_covered_in_this_framework_are_for_the_most_part__target_URLs__they_can_be_youtube_videos_or_facebook_posts__we_are_talking_about_a_social_media_platform_URL__not_all_of_them_are_supported_of_course_and_different_versions_prograd_in_supporting_more_and_more_of_themavailabilityCheck_is_the_action_by_which_we_verify_that_a_target_URL_is_accessible_from_a_certain_country_vantagePoint_is_a_point_in_the_Internet_network_from_which_the_availabilityCheck_is_executed_to_a_targetURL__They_are_identified_by_the_nationality_of_the_internet_service_provider_hosting_them_agent_a_tool_executed_from_a_vantagePoint_this_tool_connects_to_a_target_URL_and_verify_if_the_content_is_reachable_or_not__The_purpose_of_Makhno_as_you_can_guess_is_to_map_whether_a_social_media_content_is_accessible_from_a_nation_or_not_.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var MakhnoApiDesign = require('index'); // See note below*.
* var xxxSvc = new MakhnoApiDesign.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new MakhnoApiDesign.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new MakhnoApiDesign.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new MakhnoApiDesign.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AddScheduled model constructor.
     * @property {module:model/AddScheduled}
     */
    AddScheduled,

    /**
     * The ParsePayload model constructor.
     * @property {module:model/ParsePayload}
     */
    ParsePayload,

    /**
     * The ParseResult model constructor.
     * @property {module:model/ParseResult}
     */
    ParseResult,

    /**
     * The ProposedUrl model constructor.
     * @property {module:model/ProposedUrl}
     */
    ProposedUrl,

    /**
     * The ScheduledActivity model constructor.
     * @property {module:model/ScheduledActivity}
     */
    ScheduledActivity,

    /**
     * The ScheduledList model constructor.
     * @property {module:model/ScheduledList}
     */
    ScheduledList,

    /**
     * The SubmissionDetail model constructor.
     * @property {module:model/SubmissionDetail}
     */
    SubmissionDetail,

    /**
     * The SubmissionList model constructor.
     * @property {module:model/SubmissionList}
     */
    SubmissionList,

    /**
     * The SubmissionProposal model constructor.
     * @property {module:model/SubmissionProposal}
     */
    SubmissionProposal,

    /**
     * The SupportedUrl model constructor.
     * @property {module:model/SupportedUrl}
     */
    SupportedUrl,

    /**
     * The SupportedUrlFormat model constructor.
     * @property {module:model/SupportedUrlFormat}
     */
    SupportedUrlFormat,

    /**
     * The SupportedUrlFormatList model constructor.
     * @property {module:model/SupportedUrlFormatList}
     */
    SupportedUrlFormatList,

    /**
     * The TestResult model constructor.
     * @property {module:model/TestResult}
     */
    TestResult,

    /**
     * The TestResultList model constructor.
     * @property {module:model/TestResultList}
     */
    TestResultList,

    /**
     * The ValidityCheck model constructor.
     * @property {module:model/ValidityCheck}
     */
    ValidityCheck,

    /**
    * The GAFAMApi service constructor.
    * @property {module:api/GAFAMApi}
    */
    GAFAMApi,

    /**
    * The ResultsApi service constructor.
    * @property {module:api/ResultsApi}
    */
    ResultsApi,

    /**
    * The ScheduledApi service constructor.
    * @property {module:api/ScheduledApi}
    */
    ScheduledApi,

    /**
    * The SubmissionApi service constructor.
    * @property {module:api/SubmissionApi}
    */
    SubmissionApi
};
